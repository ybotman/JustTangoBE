const axios = require('axios');
const mongoose = require('mongoose');
const Organizers = require('./models/organizers');
const Regions = require('./models/regions');
require('dotenv').config();

const mongoURI = process.env.MONGODB_URI;

mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err));

// Function to fetch JSON data from the URL
const fetchData = async () => {
    try {
        const response = await axios.get('https://bostontangocalendar.com/wp-json/tribe/events/v1/organizers');
        return response.data.organizers; // Assuming 'organizers' is the correct key
    } catch (error) {
        console.error('Error fetching data:', error);
        return [];
    }
};

// Function to ingest or update organizers one by one
const ingestOrganizers = async () => {
    try {
        const organizers = await fetchData();
        if (organizers.length === 0) {
            console.log('No organizers found in the fetched data.');
            return;
        }

        for (const organizer of organizers) {
            const region = await Regions.findOne({ regionName: 'Boston' }); // Modify if regions are dynamic
            if (!region) {
                console.log(`Region not found for organizer ${organizer.organizer}`);
                continue;
            }

            // Define images data structure
            let images = [];
            if (organizer.image) {
                images.push({
                    imageUrl: organizer.image.url,
                    width: organizer.image.width,
                    height: organizer.image.height,
                    sizes: {
                        thumbnail: organizer.image.sizes.thumbnail?.url,
                        medium: organizer.image.sizes.medium?.url,
                        large: organizer.image.sizes.large?.url,
                    }
                });
            }

            // Update or insert organizer
            await Organizers.updateOne(
                { organizerName: organizer.organizer }, // Check if the organizer already exists
                {
                    $set: {
                        organizerName: organizer.organizer,
                        organizerShortName: organizer.slug,
                        region: region._id,
                        regionRole: 'Organizer', // Modify as necessary
                        url: organizer.url,
                        description: organizer.description || '',
                        images: images,
                        phone: organizer.phone || '',
                        publicEmail: organizer.email || '',
                        loginId: organizer.global_id,
                        activeFlag: true, // Modify as necessary
                        lastActivity: new Date(),
                        paymentTier: 'free', // Modify as necessary
                        paidBool: false // Modify as necessary
                    }
                },
                { upsert: true } // Insert if doesn't exist
            );

            console.log(`Organizer ${organizer.organizer} processed.`);
        }

        console.log('All organizers processed successfully');
    } catch (error) {
        console.error('Error processing organizers:', error);
    } finally {
        mongoose.connection.close();
        console.log('MongoDB connection closed');
    }
};

ingestOrganizers();